name: ci

on: [ workflow_dispatch, push, pull_request ]

jobs:
  build_gcc:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_config:
          - { version: 14 }
          - { version: 13 }
          - { version: 12 }
          - { version: 11 }
          - { version: 10 }
          - { version: 9 }
    container:
      image: gcc:${{ matrix.build_config.version }}
      options: -v /usr/local:/host_usr_local
    name: "gcc-${{ matrix.build_config.version }}"
    steps:
      - uses: actions/checkout@main
      - name: Setup
        run: |
          echo "/host_usr_local/bin" >> $GITHUB_PATH
          script/ci_setup_linux.sh
      - name: Setup Dependencies
        run: script/ci_setup_dependencies.sh
      - name: Build
        run: script/ci_build.sh


  build_clang:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_config:
          - { version: 18 }
          - { version: 17 }
          - { version: 16 }
          - { version: 15 }
          - { version: 14 }
          - { version: 13 }
          - { version: 12 }
          - { version: 11 }
    container:
      image: teeks99/clang-ubuntu:${{ matrix.build_config.version }}
      options: -v /usr/local:/host_usr_local
    name: "clang-${{ matrix.build_config.version }}"
    env:
      CC: clang-${{ matrix.build_config.version }}${{ matrix.build_config.suffix }}
      CXX: clang++-${{ matrix.build_config.version }}${{ matrix.build_config.suffix }}
    steps:
      - uses: actions/checkout@main
      - name: Setup
        run: |
          echo "/host_usr_local/bin" >> $GITHUB_PATH
          script/ci_setup_linux.sh
      - name: Setup libc++
        run: |
          if [ "${{ matrix.build_config.version }}" -ge "12" ]; then
            apt-get install -y --no-install-recommends libunwind-${{ matrix.build_config.version }}-dev;
          fi
          echo "CXXFLAGS=-stdlib=libc++" >> $GITHUB_ENV
      - name: Setup Dependencies
        run: script/ci_setup_dependencies.sh
      - name: Build
        run: script/ci_build.sh


  build_osx:
    runs-on: macos-latest
    name: "OS X"
    env:
      CC: clang
      CXX: clang++
    steps:
      - uses: actions/checkout@main
      - name: Setup
        run: sudo script/ci_setup_dependencies.sh
      - name: Build
        run: script/ci_build.sh


  build_windows_msvc:
    runs-on: windows-${{ matrix.msvc_version }}
    strategy:
      matrix:
        msvc_version:
          - 2019
          - 2022
    name: "Windows ${{ matrix.msvc_version }} MSVC"
    steps:
      - uses: actions/checkout@main
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Setup
        shell: bash
        run: script/ci_setup_dependencies.sh
      - name: Build
        shell: bash
        run: script/ci_build.sh


  formatting-check:
    name: "formatting"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: DoozyX/clang-format-lint-action@master
        name: "Verify formatting"
        with:
          clangFormatVersion: 16
